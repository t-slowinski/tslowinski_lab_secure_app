[{"name":"CVE-2014-0114","scannerType":"OPENSOURCE","description":"Apache Commons BeanUtils, as distributed in lib/commons-beanutils-1.8.0.jar in Apache Struts 1.x through 1.3.10 and in other products requiring commons-beanutils through 1.9.2, does not suppress the class property, which allows remote attackers to \"manipulate\" the ClassLoader and execute arbitrary code via the class parameter, as demonstrated by the passing of this parameter to the getClass method of the ActionForm object in Struts 1.","severity":"HIGH","packageName":"commons-beanutils","packageVersion":"1.7.0","references":"* [https://ossindex.sonatype.org/vulnerability/CVE-2014-0114?component-type\u003dmaven\u0026component-name\u003dcommons-beanutils%2Fcommons-beanutils\u0026utm_source\u003ddependency-track\u0026utm_medium\u003dintegration\u0026utm_content\u003dv3.8.0](https://ossindex.sonatype.org/vulnerability/CVE-2014-0114?component-type\u003dmaven\u0026component-name\u003dcommons-beanutils%2Fcommons-beanutils\u0026utm_source\u003ddependency-track\u0026utm_medium\u003dintegration\u0026utm_content\u003dv3.8.0)"},{"name":"CVE-2023-24998","scannerType":"OPENSOURCE","description":"Apache Commons FileUpload before 1.5 does not limit the number of request parts to be processed resulting in the possibility of an attacker triggering a DoS with a malicious upload or series of uploads. Note that, like all of the file upload limits, the new configuration option (FileUploadBase#setFileCountMax) is not enabled by default and must be explicitly configured.","severity":"HIGH","packageName":"commons-fileupload","packageVersion":"1.3.2","references":"* [https://ossindex.sonatype.org/vulnerability/CVE-2023-24998?component-type\u003dmaven\u0026component-name\u003dcommons-fileupload%2Fcommons-fileupload\u0026utm_source\u003ddependency-track\u0026utm_medium\u003dintegration\u0026utm_content\u003dv3.8.0](https://ossindex.sonatype.org/vulnerability/CVE-2023-24998?component-type\u003dmaven\u0026component-name\u003dcommons-fileupload%2Fcommons-fileupload\u0026utm_source\u003ddependency-track\u0026utm_medium\u003dintegration\u0026utm_content\u003dv3.8.0)"},{"name":"CVE-2016-1000031","scannerType":"OPENSOURCE","description":"Apache Commons FileUpload before 1.3.3 DiskFileItem File Manipulation Remote Code Execution","severity":"CRITICAL","packageName":"commons-fileupload","packageVersion":"1.3.2","references":"* [https://ossindex.sonatype.org/vulnerability/CVE-2016-1000031?component-type\u003dmaven\u0026component-name\u003dcommons-fileupload%2Fcommons-fileupload\u0026utm_source\u003ddependency-track\u0026utm_medium\u003dintegration\u0026utm_content\u003dv3.8.0](https://ossindex.sonatype.org/vulnerability/CVE-2016-1000031?component-type\u003dmaven\u0026component-name\u003dcommons-fileupload%2Fcommons-fileupload\u0026utm_source\u003ddependency-track\u0026utm_medium\u003dintegration\u0026utm_content\u003dv3.8.0)"},{"name":"CVE-2021-29425","scannerType":"OPENSOURCE","description":"commons-io - Path Traversal [CVE-2021-29425]\n\nThe software uses external input to construct a pathname that is intended to identify a file or directory that is located underneath a restricted parent directory, but the software does not properly neutralize special elements within the pathname that can cause the pathname to resolve to a location that is outside of the restricted directory.","severity":"MEDIUM","packageName":"commons-io","packageVersion":"2.2","references":"* [https://ossindex.sonatype.org/vulnerability/CVE-2021-29425?component-type\u003dmaven\u0026component-name\u003dcommons-io%2Fcommons-io\u0026utm_source\u003ddependency-track\u0026utm_medium\u003dintegration\u0026utm_content\u003dv3.8.0](https://ossindex.sonatype.org/vulnerability/CVE-2021-29425?component-type\u003dmaven\u0026component-name\u003dcommons-io%2Fcommons-io\u0026utm_source\u003ddependency-track\u0026utm_medium\u003dintegration\u0026utm_content\u003dv3.8.0)"},{"name":"CVE-2018-1000632","scannerType":"OPENSOURCE","description":"dom4j version prior to version 2.1.1 contains a CWE-91: XML Injection vulnerability in Class: Element. Methods: addElement, addAttribute that can result in an attacker tampering with XML documents through XML injection. This attack appear to be exploitable via an attacker specifying attributes or elements in the XML document. This vulnerability appears to have been fixed in 2.1.1 or later.","severity":"HIGH","packageName":"dom4j","packageVersion":"1.6.1","references":"* [https://ossindex.sonatype.org/vulnerability/CVE-2018-1000632?component-type\u003dmaven\u0026component-name\u003ddom4j%2Fdom4j\u0026utm_source\u003ddependency-track\u0026utm_medium\u003dintegration\u0026utm_content\u003dv3.8.0](https://ossindex.sonatype.org/vulnerability/CVE-2018-1000632?component-type\u003dmaven\u0026component-name\u003ddom4j%2Fdom4j\u0026utm_source\u003ddependency-track\u0026utm_medium\u003dintegration\u0026utm_content\u003dv3.8.0)"},{"name":"CVE-2020-10683","scannerType":"OPENSOURCE","description":"dom4j before 2.0.3 and 2.1.x before 2.1.3 allows external DTDs and External Entities by default, which might enable XXE attacks. However, there is popular external documentation from OWASP showing how to enable the safe, non-default behavior in any application that uses dom4j.","severity":"CRITICAL","packageName":"dom4j","packageVersion":"1.6.1","references":"* [https://ossindex.sonatype.org/vulnerability/CVE-2020-10683?component-type\u003dmaven\u0026component-name\u003ddom4j%2Fdom4j\u0026utm_source\u003ddependency-track\u0026utm_medium\u003dintegration\u0026utm_content\u003dv3.8.0](https://ossindex.sonatype.org/vulnerability/CVE-2020-10683?component-type\u003dmaven\u0026component-name\u003ddom4j%2Fdom4j\u0026utm_source\u003ddependency-track\u0026utm_medium\u003dintegration\u0026utm_content\u003dv3.8.0)"},{"name":"CVE-2022-25647","scannerType":"OPENSOURCE","description":"gson - Deserialization of Untrusted Data [CVE-2022-25647]\n\nThe application deserializes untrusted data without sufficiently verifying that the resulting data will be valid.\n\nSonatype\u0027s research suggests that this CVE\u0027s details differ from those defined at NVD. See https://ossindex.sonatype.org/vulnerability/CVE-2022-25647 for details","severity":"HIGH","packageName":"gson","packageVersion":"2.8.1","references":"* [https://ossindex.sonatype.org/vulnerability/CVE-2022-25647?component-type\u003dmaven\u0026component-name\u003dcom.google.code.gson%2Fgson\u0026utm_source\u003ddependency-track\u0026utm_medium\u003dintegration\u0026utm_content\u003dv3.8.0](https://ossindex.sonatype.org/vulnerability/CVE-2022-25647?component-type\u003dmaven\u0026component-name\u003dcom.google.code.gson%2Fgson\u0026utm_source\u003ddependency-track\u0026utm_medium\u003dintegration\u0026utm_content\u003dv3.8.0)"},{"name":"CVE-2020-25638","scannerType":"OPENSOURCE","description":"A flaw was found in hibernate-core in versions prior to and including 5.4.23.Final. A SQL injection in the implementation of the JPA Criteria API can permit unsanitized literals when a literal is used in the SQL comments of the query. This flaw could allow an attacker to access unauthorized information or possibly conduct further attacks. The highest threat from this vulnerability is to data confidentiality and integrity.","severity":"HIGH","packageName":"hibernate-core","packageVersion":"3.3.1.GA","references":"* [https://ossindex.sonatype.org/vulnerability/CVE-2020-25638?component-type\u003dmaven\u0026component-name\u003dorg.hibernate%2Fhibernate-core\u0026utm_source\u003ddependency-track\u0026utm_medium\u003dintegration\u0026utm_content\u003dv3.8.0](https://ossindex.sonatype.org/vulnerability/CVE-2020-25638?component-type\u003dmaven\u0026component-name\u003dorg.hibernate%2Fhibernate-core\u0026utm_source\u003ddependency-track\u0026utm_medium\u003dintegration\u0026utm_content\u003dv3.8.0)"},{"name":"CVE-2021-4104","scannerType":"OPENSOURCE","description":"JMSAppender in Log4j 1.2 is vulnerable to deserialization of untrusted data when the attacker has write access to the Log4j configuration. The attacker can provide TopicBindingName and TopicConnectionFactoryBindingName configurations causing JMSAppender to perform JNDI requests that result in remote code execution in a similar fashion to CVE-2021-44228. Note this issue only affects Log4j 1.2 when specifically configured to use JMSAppender, which is not the default. Apache Log4j 1.2 reached end of life in August 2015. Users should upgrade to Log4j 2 as it addresses numerous other issues from the previous versions.\n\nSonatype\u0027s research suggests that this CVE\u0027s details differ from those defined at NVD. See https://ossindex.sonatype.org/vulnerability/CVE-2021-4104 for details","severity":"HIGH","packageName":"log4j","packageVersion":"1.2.14","references":"* [https://ossindex.sonatype.org/vulnerability/CVE-2021-4104?component-type\u003dmaven\u0026component-name\u003dlog4j%2Flog4j\u0026utm_source\u003ddependency-track\u0026utm_medium\u003dintegration\u0026utm_content\u003dv3.8.0](https://ossindex.sonatype.org/vulnerability/CVE-2021-4104?component-type\u003dmaven\u0026component-name\u003dlog4j%2Flog4j\u0026utm_source\u003ddependency-track\u0026utm_medium\u003dintegration\u0026utm_content\u003dv3.8.0)"},{"name":"CVE-2023-26464","scannerType":"OPENSOURCE","description":"** UNSUPPORTED WHEN ASSIGNED **\n\nWhen using the Chainsaw or SocketAppender components with Log4j 1.x on JRE less than 1.7, an attacker that manages to cause a logging entry involving a specially-crafted (ie, deeply nested) \nhashmap or hashtable (depending on which logging component is in use) to be processed could exhaust the available memory in the virtual machine and achieve Denial of Service when the object is deserialized.\n\nThis issue affects Apache Log4j before 2. Affected users are recommended to update to Log4j 2.x.\n\nNOTE: This vulnerability only affects products that are no longer supported by the maintainer.\n\n\n\n\n","severity":"HIGH","packageName":"log4j","packageVersion":"1.2.14","references":"* [https://ossindex.sonatype.org/vulnerability/CVE-2023-26464?component-type\u003dmaven\u0026component-name\u003dlog4j%2Flog4j\u0026utm_source\u003ddependency-track\u0026utm_medium\u003dintegration\u0026utm_content\u003dv3.8.0](https://ossindex.sonatype.org/vulnerability/CVE-2023-26464?component-type\u003dmaven\u0026component-name\u003dlog4j%2Flog4j\u0026utm_source\u003ddependency-track\u0026utm_medium\u003dintegration\u0026utm_content\u003dv3.8.0)"},{"name":"CVE-2022-23307","scannerType":"OPENSOURCE","description":"CVE-2020-9493 identified a deserialization issue that was present in Apache Chainsaw. Prior to Chainsaw V2.0 Chainsaw was a component of Apache Log4j 1.2.x where the same issue exists.\n\nSonatype\u0027s research suggests that this CVE\u0027s details differ from those defined at NVD. See https://ossindex.sonatype.org/vulnerability/CVE-2022-23307 for details","severity":"HIGH","packageName":"log4j","packageVersion":"1.2.14","references":"* [https://ossindex.sonatype.org/vulnerability/CVE-2022-23307?component-type\u003dmaven\u0026component-name\u003dlog4j%2Flog4j\u0026utm_source\u003ddependency-track\u0026utm_medium\u003dintegration\u0026utm_content\u003dv3.8.0](https://ossindex.sonatype.org/vulnerability/CVE-2022-23307?component-type\u003dmaven\u0026component-name\u003dlog4j%2Flog4j\u0026utm_source\u003ddependency-track\u0026utm_medium\u003dintegration\u0026utm_content\u003dv3.8.0)"},{"name":"CVE-2022-23302","scannerType":"OPENSOURCE","description":"JMSSink in all versions of Log4j 1.x is vulnerable to deserialization of untrusted data when the attacker has write access to the Log4j configuration or if the configuration references an LDAP service the attacker has access to. The attacker can provide a TopicConnectionFactoryBindingName configuration causing JMSSink to perform JNDI requests that result in remote code execution in a similar fashion to CVE-2021-4104. Note this issue only affects Log4j 1.x when specifically configured to use JMSSink, which is not the default. Apache Log4j 1.2 reached end of life in August 2015. Users should upgrade to Log4j 2 as it addresses numerous other issues from the previous versions.\n\nSonatype\u0027s research suggests that this CVE\u0027s details differ from those defined at NVD. See https://ossindex.sonatype.org/vulnerability/CVE-2022-23302 for details","severity":"HIGH","packageName":"log4j","packageVersion":"1.2.14","references":"* [https://ossindex.sonatype.org/vulnerability/CVE-2022-23302?component-type\u003dmaven\u0026component-name\u003dlog4j%2Flog4j\u0026utm_source\u003ddependency-track\u0026utm_medium\u003dintegration\u0026utm_content\u003dv3.8.0](https://ossindex.sonatype.org/vulnerability/CVE-2022-23302?component-type\u003dmaven\u0026component-name\u003dlog4j%2Flog4j\u0026utm_source\u003ddependency-track\u0026utm_medium\u003dintegration\u0026utm_content\u003dv3.8.0)"},{"name":"CVE-2022-23305","scannerType":"OPENSOURCE","description":"By design, the JDBCAppender in Log4j 1.2.x accepts an SQL statement as a configuration parameter where the values to be inserted are converters from PatternLayout. The message converter, %m, is likely to always be included. This allows attackers to manipulate the SQL by entering crafted strings into input fields or headers of an application that are logged allowing unintended SQL queries to be executed. Note this issue only affects Log4j 1.x when specifically configured to use the JDBCAppender, which is not the default. Beginning in version 2.0-beta8, the JDBCAppender was re-introduced with proper support for parameterized SQL queries and further customization over the columns written to in logs. Apache Log4j 1.2 reached end of life in August 2015. Users should upgrade to Log4j 2 as it addresses numerous other issues from the previous versions.","severity":"CRITICAL","packageName":"log4j","packageVersion":"1.2.14","references":"* [https://ossindex.sonatype.org/vulnerability/CVE-2022-23305?component-type\u003dmaven\u0026component-name\u003dlog4j%2Flog4j\u0026utm_source\u003ddependency-track\u0026utm_medium\u003dintegration\u0026utm_content\u003dv3.8.0](https://ossindex.sonatype.org/vulnerability/CVE-2022-23305?component-type\u003dmaven\u0026component-name\u003dlog4j%2Flog4j\u0026utm_source\u003ddependency-track\u0026utm_medium\u003dintegration\u0026utm_content\u003dv3.8.0)"},{"name":"CVE-2019-17571","scannerType":"OPENSOURCE","description":"Included in Log4j 1.2 is a SocketServer class that is vulnerable to deserialization of untrusted data which can be exploited to remotely execute arbitrary code when combined with a deserialization gadget when listening to untrusted network traffic for log data. This affects Log4j versions up to 1.2 up to 1.2.17.\n\nSonatype\u0027s research suggests that this CVE\u0027s details differ from those defined at NVD. See https://ossindex.sonatype.org/vulnerability/CVE-2019-17571 for details","severity":"CRITICAL","packageName":"log4j","packageVersion":"1.2.14","references":"* [https://ossindex.sonatype.org/vulnerability/CVE-2019-17571?component-type\u003dmaven\u0026component-name\u003dlog4j%2Flog4j\u0026utm_source\u003ddependency-track\u0026utm_medium\u003dintegration\u0026utm_content\u003dv3.8.0](https://ossindex.sonatype.org/vulnerability/CVE-2019-17571?component-type\u003dmaven\u0026component-name\u003dlog4j%2Flog4j\u0026utm_source\u003ddependency-track\u0026utm_medium\u003dintegration\u0026utm_content\u003dv3.8.0)"},{"name":"CVE-2020-9488","scannerType":"OPENSOURCE","description":"Improper validation of certificate with host mismatch in Apache Log4j SMTP appender. This could allow an SMTPS connection to be intercepted by a man-in-the-middle attack which could leak any log messages sent through that appender. Fixed in Apache Log4j 2.12.3 and 2.13.1","severity":"LOW","packageName":"log4j-core","packageVersion":"2.3","references":"* [https://ossindex.sonatype.org/vulnerability/CVE-2020-9488?component-type\u003dmaven\u0026component-name\u003dorg.apache.logging.log4j%2Flog4j-core\u0026utm_source\u003ddependency-track\u0026utm_medium\u003dintegration\u0026utm_content\u003dv3.8.0](https://ossindex.sonatype.org/vulnerability/CVE-2020-9488?component-type\u003dmaven\u0026component-name\u003dorg.apache.logging.log4j%2Flog4j-core\u0026utm_source\u003ddependency-track\u0026utm_medium\u003dintegration\u0026utm_content\u003dv3.8.0)"},{"name":"CVE-2021-45105","scannerType":"OPENSOURCE","description":"Apache Log4j2 versions 2.0-alpha1 through 2.16.0 (excluding 2.12.3 and 2.3.1) did not protect from uncontrolled recursion from self-referential lookups. This allows an attacker with control over Thread Context Map data to cause a denial of service when a crafted string is interpreted. This issue was fixed in Log4j 2.17.0, 2.12.3, and 2.3.1.","severity":"MEDIUM","packageName":"log4j-core","packageVersion":"2.3","references":"* [https://ossindex.sonatype.org/vulnerability/CVE-2021-45105?component-type\u003dmaven\u0026component-name\u003dorg.apache.logging.log4j%2Flog4j-core\u0026utm_source\u003ddependency-track\u0026utm_medium\u003dintegration\u0026utm_content\u003dv3.8.0](https://ossindex.sonatype.org/vulnerability/CVE-2021-45105?component-type\u003dmaven\u0026component-name\u003dorg.apache.logging.log4j%2Flog4j-core\u0026utm_source\u003ddependency-track\u0026utm_medium\u003dintegration\u0026utm_content\u003dv3.8.0)"},{"name":"CVE-2021-44832","scannerType":"OPENSOURCE","description":"Apache Log4j2 versions 2.0-beta7 through 2.17.0 (excluding security fix releases 2.3.2 and 2.12.4) are vulnerable to a remote code execution (RCE) attack when a configuration uses a JDBC Appender with a JNDI LDAP data source URI when an attacker has control of the target LDAP server. This issue is fixed by limiting JNDI data source names to the java protocol in Log4j2 versions 2.17.1, 2.12.4, and 2.3.2.","severity":"MEDIUM","packageName":"log4j-core","packageVersion":"2.3","references":"* [https://ossindex.sonatype.org/vulnerability/CVE-2021-44832?component-type\u003dmaven\u0026component-name\u003dorg.apache.logging.log4j%2Flog4j-core\u0026utm_source\u003ddependency-track\u0026utm_medium\u003dintegration\u0026utm_content\u003dv3.8.0](https://ossindex.sonatype.org/vulnerability/CVE-2021-44832?component-type\u003dmaven\u0026component-name\u003dorg.apache.logging.log4j%2Flog4j-core\u0026utm_source\u003ddependency-track\u0026utm_medium\u003dintegration\u0026utm_content\u003dv3.8.0)"},{"name":"CVE-2021-45046","scannerType":"OPENSOURCE","description":"It was found that the fix to address CVE-2021-44228 in Apache Log4j 2.15.0 was incomplete in certain non-default configurations. This could allows attackers with control over Thread Context Map (MDC) input data when the logging configuration uses a non-default Pattern Layout with either a Context Lookup (for example, $${ctx:loginId}) or a Thread Context Map pattern (%X, %mdc, or %MDC) to craft malicious input data using a JNDI Lookup pattern resulting in an information leak and remote code execution in some environments and local code execution in all environments. Log4j 2.16.0 (Java 8) and 2.12.2 (Java 7) fix this issue by removing support for message lookup patterns and disabling JNDI functionality by default.","severity":"CRITICAL","packageName":"log4j-core","packageVersion":"2.3","references":"* [https://ossindex.sonatype.org/vulnerability/CVE-2021-45046?component-type\u003dmaven\u0026component-name\u003dorg.apache.logging.log4j%2Flog4j-core\u0026utm_source\u003ddependency-track\u0026utm_medium\u003dintegration\u0026utm_content\u003dv3.8.0](https://ossindex.sonatype.org/vulnerability/CVE-2021-45046?component-type\u003dmaven\u0026component-name\u003dorg.apache.logging.log4j%2Flog4j-core\u0026utm_source\u003ddependency-track\u0026utm_medium\u003dintegration\u0026utm_content\u003dv3.8.0)"},{"name":"CVE-2017-5645","scannerType":"OPENSOURCE","description":"In Apache Log4j 2.x before 2.8.2, when using the TCP socket server or UDP socket server to receive serialized log events from another application, a specially crafted binary payload can be sent that, when deserialized, can execute arbitrary code.","severity":"CRITICAL","packageName":"log4j-core","packageVersion":"2.3","references":"* [https://ossindex.sonatype.org/vulnerability/CVE-2017-5645?component-type\u003dmaven\u0026component-name\u003dorg.apache.logging.log4j%2Flog4j-core\u0026utm_source\u003ddependency-track\u0026utm_medium\u003dintegration\u0026utm_content\u003dv3.8.0](https://ossindex.sonatype.org/vulnerability/CVE-2017-5645?component-type\u003dmaven\u0026component-name\u003dorg.apache.logging.log4j%2Flog4j-core\u0026utm_source\u003ddependency-track\u0026utm_medium\u003dintegration\u0026utm_content\u003dv3.8.0)"},{"name":"CVE-2021-44228","scannerType":"OPENSOURCE","description":"Apache Log4j2 2.0-beta9 through 2.15.0 (excluding security releases 2.12.2, 2.12.3, and 2.3.1) JNDI features used in configuration, log messages, and parameters do not protect against attacker controlled LDAP and other JNDI related endpoints. An attacker who can control log messages or log message parameters can execute arbitrary code loaded from LDAP servers when message lookup substitution is enabled. From log4j 2.15.0, this behavior has been disabled by default. From version 2.16.0 (along with 2.12.2, 2.12.3, and 2.3.1), this functionality has been completely removed. Note that this vulnerability is specific to log4j-core and does not affect log4net, log4cxx, or other Apache Logging Services projects.\n\nSonatype\u0027s research suggests that this CVE\u0027s details differ from those defined at NVD. See https://ossindex.sonatype.org/vulnerability/CVE-2021-44228 for details","severity":"CRITICAL","packageName":"log4j-core","packageVersion":"2.3","references":"* [https://ossindex.sonatype.org/vulnerability/CVE-2021-44228?component-type\u003dmaven\u0026component-name\u003dorg.apache.logging.log4j%2Flog4j-core\u0026utm_source\u003ddependency-track\u0026utm_medium\u003dintegration\u0026utm_content\u003dv3.8.0](https://ossindex.sonatype.org/vulnerability/CVE-2021-44228?component-type\u003dmaven\u0026component-name\u003dorg.apache.logging.log4j%2Flog4j-core\u0026utm_source\u003ddependency-track\u0026utm_medium\u003dintegration\u0026utm_content\u003dv3.8.0)"},{"name":"CVE-2020-2934","scannerType":"OPENSOURCE","description":"Vulnerability in the MySQL Connectors product of Oracle MySQL (component: Connector/J). Supported versions that are affected are 8.0.19 and prior and 5.1.48 and prior. Difficult to exploit vulnerability allows unauthenticated attacker with network access via multiple protocols to compromise MySQL Connectors. Successful attacks require human interaction from a person other than the attacker. Successful attacks of this vulnerability can result in unauthorized update, insert or delete access to some of MySQL Connectors accessible data as well as unauthorized read access to a subset of MySQL Connectors accessible data and unauthorized ability to cause a partial denial of service (partial DOS) of MySQL Connectors. CVSS 3.0 Base Score 5.0 (Confidentiality, Integrity and Availability impacts). CVSS Vector: (CVSS:3.0/AV:N/AC:H/PR:N/UI:R/S:U/C:L/I:L/A:L).","severity":"MEDIUM","packageName":"mysql-connector-java","packageVersion":"5.1.42","references":"* [https://ossindex.sonatype.org/vulnerability/CVE-2020-2934?component-type\u003dmaven\u0026component-name\u003dmysql%2Fmysql-connector-java\u0026utm_source\u003ddependency-track\u0026utm_medium\u003dintegration\u0026utm_content\u003dv3.8.0](https://ossindex.sonatype.org/vulnerability/CVE-2020-2934?component-type\u003dmaven\u0026component-name\u003dmysql%2Fmysql-connector-java\u0026utm_source\u003ddependency-track\u0026utm_medium\u003dintegration\u0026utm_content\u003dv3.8.0)"},{"name":"CVE-2019-2692","scannerType":"OPENSOURCE","description":"Vulnerability in the MySQL Connectors component of Oracle MySQL (subcomponent: Connector/J). Supported versions that are affected are 8.0.15 and prior. Difficult to exploit vulnerability allows high privileged attacker with logon to the infrastructure where MySQL Connectors executes to compromise MySQL Connectors. Successful attacks require human interaction from a person other than the attacker. Successful attacks of this vulnerability can result in takeover of MySQL Connectors. CVSS 3.0 Base Score 6.3 (Confidentiality, Integrity and Availability impacts). CVSS Vector: (CVSS:3.0/AV:L/AC:H/PR:H/UI:R/S:U/C:H/I:H/A:H).","severity":"MEDIUM","packageName":"mysql-connector-java","packageVersion":"5.1.42","references":"* [https://ossindex.sonatype.org/vulnerability/CVE-2019-2692?component-type\u003dmaven\u0026component-name\u003dmysql%2Fmysql-connector-java\u0026utm_source\u003ddependency-track\u0026utm_medium\u003dintegration\u0026utm_content\u003dv3.8.0](https://ossindex.sonatype.org/vulnerability/CVE-2019-2692?component-type\u003dmaven\u0026component-name\u003dmysql%2Fmysql-connector-java\u0026utm_source\u003ddependency-track\u0026utm_medium\u003dintegration\u0026utm_content\u003dv3.8.0)"},{"name":"CVE-2022-21363","scannerType":"OPENSOURCE","description":"Vulnerability in the MySQL Connectors product of Oracle MySQL (component: Connector/J). Supported versions that are affected are 8.0.27 and prior. Difficult to exploit vulnerability allows high privileged attacker with network access via multiple protocols to compromise MySQL Connectors. Successful attacks of this vulnerability can result in takeover of MySQL Connectors. CVSS 3.1 Base Score 6.6 (Confidentiality, Integrity and Availability impacts). CVSS Vector: (CVSS:3.1/AV:N/AC:H/PR:H/UI:N/S:U/C:H/I:H/A:H).","severity":"MEDIUM","packageName":"mysql-connector-java","packageVersion":"5.1.42","references":"* [https://ossindex.sonatype.org/vulnerability/CVE-2022-21363?component-type\u003dmaven\u0026component-name\u003dmysql%2Fmysql-connector-java\u0026utm_source\u003ddependency-track\u0026utm_medium\u003dintegration\u0026utm_content\u003dv3.8.0](https://ossindex.sonatype.org/vulnerability/CVE-2022-21363?component-type\u003dmaven\u0026component-name\u003dmysql%2Fmysql-connector-java\u0026utm_source\u003ddependency-track\u0026utm_medium\u003dintegration\u0026utm_content\u003dv3.8.0)"},{"name":"CVE-2018-3258","scannerType":"OPENSOURCE","description":"Vulnerability in the MySQL Connectors component of Oracle MySQL (subcomponent: Connector/J). Supported versions that are affected are 8.0.12 and prior. Easily exploitable vulnerability allows low privileged attacker with network access via multiple protocols to compromise MySQL Connectors. Successful attacks of this vulnerability can result in takeover of MySQL Connectors. CVSS 3.0 Base Score 8.8 (Confidentiality, Integrity and Availability impacts). CVSS Vector: (CVSS:3.0/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:H/A:H).","severity":"HIGH","packageName":"mysql-connector-java","packageVersion":"5.1.42","references":"* [https://ossindex.sonatype.org/vulnerability/CVE-2018-3258?component-type\u003dmaven\u0026component-name\u003dmysql%2Fmysql-connector-java\u0026utm_source\u003ddependency-track\u0026utm_medium\u003dintegration\u0026utm_content\u003dv3.8.0](https://ossindex.sonatype.org/vulnerability/CVE-2018-3258?component-type\u003dmaven\u0026component-name\u003dmysql%2Fmysql-connector-java\u0026utm_source\u003ddependency-track\u0026utm_medium\u003dintegration\u0026utm_content\u003dv3.8.0)"},{"name":"CVE-2022-22965","scannerType":"OPENSOURCE","description":"A Spring MVC or Spring WebFlux application running on JDK 9+ may be vulnerable to remote code execution (RCE) via data binding. The specific exploit requires the application to run on Tomcat as a WAR deployment. If the application is deployed as a Spring Boot executable jar, i.e. the default, it is not vulnerable to the exploit. However, the nature of the vulnerability is more general, and there may be other ways to exploit it.","severity":"CRITICAL","packageName":"spring-beans","packageVersion":"3.0.5.RELEASE","references":"* [https://ossindex.sonatype.org/vulnerability/CVE-2022-22965?component-type\u003dmaven\u0026component-name\u003dorg.springframework%2Fspring-beans\u0026utm_source\u003ddependency-track\u0026utm_medium\u003dintegration\u0026utm_content\u003dv3.8.0](https://ossindex.sonatype.org/vulnerability/CVE-2022-22965?component-type\u003dmaven\u0026component-name\u003dorg.springframework%2Fspring-beans\u0026utm_source\u003ddependency-track\u0026utm_medium\u003dintegration\u0026utm_content\u003dv3.8.0)"},{"name":"CVE-2022-22968","scannerType":"OPENSOURCE","description":"In Spring Framework versions 5.3.0 - 5.3.18, 5.2.0 - 5.2.20, and older unsupported versions, the patterns for disallowedFields on a DataBinder are case sensitive which means a field is not effectively protected unless it is listed with both upper and lower case for the first character of the field, including upper and lower case for the first character of all nested fields within the property path.","severity":"MEDIUM","packageName":"spring-context","packageVersion":"3.0.5.RELEASE","references":"* [https://ossindex.sonatype.org/vulnerability/CVE-2022-22968?component-type\u003dmaven\u0026component-name\u003dorg.springframework%2Fspring-context\u0026utm_source\u003ddependency-track\u0026utm_medium\u003dintegration\u0026utm_content\u003dv3.8.0](https://ossindex.sonatype.org/vulnerability/CVE-2022-22968?component-type\u003dmaven\u0026component-name\u003dorg.springframework%2Fspring-context\u0026utm_source\u003ddependency-track\u0026utm_medium\u003dintegration\u0026utm_content\u003dv3.8.0)"},{"name":"CVE-2011-2894","scannerType":"OPENSOURCE","description":"Spring Framework 3.0.0 through 3.0.5, Spring Security 3.0.0 through 3.0.5 and 2.0.0 through 2.0.6, and possibly other versions deserialize objects from untrusted sources, which allows remote attackers to bypass intended security restrictions and execute untrusted code by (1) serializing a java.lang.Proxy instance and using InvocationHandler, or (2) accessing internal AOP interfaces, as demonstrated using deserialization of a DefaultListableBeanFactory instance to execute arbitrary commands via the java.lang.Runtime class.","severity":"MEDIUM","packageName":"spring-context","packageVersion":"3.0.5.RELEASE","references":"* [https://ossindex.sonatype.org/vulnerability/CVE-2011-2894?component-type\u003dmaven\u0026component-name\u003dorg.springframework%2Fspring-core\u0026utm_source\u003ddependency-track\u0026utm_medium\u003dintegration\u0026utm_content\u003dv3.8.0](https://ossindex.sonatype.org/vulnerability/CVE-2011-2894?component-type\u003dmaven\u0026component-name\u003dorg.springframework%2Fspring-core\u0026utm_source\u003ddependency-track\u0026utm_medium\u003dintegration\u0026utm_content\u003dv3.8.0)"},{"name":"CVE-2014-3578","scannerType":"OPENSOURCE","description":"Directory traversal vulnerability in Pivotal Spring Framework 3.x before 3.2.9 and 4.0 before 4.0.5 allows remote attackers to read arbitrary files via a crafted URL.","severity":"MEDIUM","packageName":"spring-core","packageVersion":"3.0.5.RELEASE","references":"* [https://ossindex.sonatype.org/vulnerability/CVE-2014-3578?component-type\u003dmaven\u0026component-name\u003dorg.springframework%2Fspring-core\u0026utm_source\u003ddependency-track\u0026utm_medium\u003dintegration\u0026utm_content\u003dv3.8.0](https://ossindex.sonatype.org/vulnerability/CVE-2014-3578?component-type\u003dmaven\u0026component-name\u003dorg.springframework%2Fspring-core\u0026utm_source\u003ddependency-track\u0026utm_medium\u003dintegration\u0026utm_content\u003dv3.8.0)"},{"name":"CVE-2011-2894","scannerType":"OPENSOURCE","description":"Spring Framework 3.0.0 through 3.0.5, Spring Security 3.0.0 through 3.0.5 and 2.0.0 through 2.0.6, and possibly other versions deserialize objects from untrusted sources, which allows remote attackers to bypass intended security restrictions and execute untrusted code by (1) serializing a java.lang.Proxy instance and using InvocationHandler, or (2) accessing internal AOP interfaces, as demonstrated using deserialization of a DefaultListableBeanFactory instance to execute arbitrary commands via the java.lang.Runtime class.","severity":"MEDIUM","packageName":"spring-core","packageVersion":"3.0.5.RELEASE","references":"* [https://ossindex.sonatype.org/vulnerability/CVE-2011-2894?component-type\u003dmaven\u0026component-name\u003dorg.springframework%2Fspring-core\u0026utm_source\u003ddependency-track\u0026utm_medium\u003dintegration\u0026utm_content\u003dv3.8.0](https://ossindex.sonatype.org/vulnerability/CVE-2011-2894?component-type\u003dmaven\u0026component-name\u003dorg.springframework%2Fspring-core\u0026utm_source\u003ddependency-track\u0026utm_medium\u003dintegration\u0026utm_content\u003dv3.8.0)"},{"name":"CVE-2023-20861","scannerType":"OPENSOURCE","description":"In Spring Framework versions 6.0.0 - 6.0.6, 5.3.0 - 5.3.25, 5.2.0.RELEASE - 5.2.22.RELEASE, and older unsupported versions, it is possible for a user to provide a specially crafted SpEL expression that may cause a denial-of-service (DoS) condition.","severity":"MEDIUM","packageName":"spring-expression","packageVersion":"3.0.5.RELEASE","references":"* [https://ossindex.sonatype.org/vulnerability/CVE-2023-20861?component-type\u003dmaven\u0026component-name\u003dorg.springframework%2Fspring-expression\u0026utm_source\u003ddependency-track\u0026utm_medium\u003dintegration\u0026utm_content\u003dv3.8.0](https://ossindex.sonatype.org/vulnerability/CVE-2023-20861?component-type\u003dmaven\u0026component-name\u003dorg.springframework%2Fspring-expression\u0026utm_source\u003ddependency-track\u0026utm_medium\u003dintegration\u0026utm_content\u003dv3.8.0)"},{"name":"CVE-2018-1257","scannerType":"OPENSOURCE","description":"Spring Framework, versions 5.0.x prior to 5.0.6, versions 4.3.x prior to 4.3.17, and older unsupported versions allows applications to expose STOMP over WebSocket endpoints with a simple, in-memory STOMP broker through the spring-messaging module. A malicious user (or attacker) can craft a message to the broker that can lead to a regular expression, denial of service attack.","severity":"MEDIUM","packageName":"spring-expression","packageVersion":"3.0.5.RELEASE","references":"* [https://ossindex.sonatype.org/vulnerability/CVE-2018-1257?component-type\u003dmaven\u0026component-name\u003dorg.springframework%2Fspring-expression\u0026utm_source\u003ddependency-track\u0026utm_medium\u003dintegration\u0026utm_content\u003dv3.8.0](https://ossindex.sonatype.org/vulnerability/CVE-2018-1257?component-type\u003dmaven\u0026component-name\u003dorg.springframework%2Fspring-expression\u0026utm_source\u003ddependency-track\u0026utm_medium\u003dintegration\u0026utm_content\u003dv3.8.0)"},{"name":"CVE-2022-22950","scannerType":"OPENSOURCE","description":"n Spring Framework versions 5.3.0 - 5.3.16 and older unsupported versions, it is possible for a user to provide a specially crafted SpEL expression that may cause a denial of service condition.","severity":"MEDIUM","packageName":"spring-expression","packageVersion":"3.0.5.RELEASE","references":"* [https://ossindex.sonatype.org/vulnerability/CVE-2022-22950?component-type\u003dmaven\u0026component-name\u003dorg.springframework%2Fspring-expression\u0026utm_source\u003ddependency-track\u0026utm_medium\u003dintegration\u0026utm_content\u003dv3.8.0](https://ossindex.sonatype.org/vulnerability/CVE-2022-22950?component-type\u003dmaven\u0026component-name\u003dorg.springframework%2Fspring-expression\u0026utm_source\u003ddependency-track\u0026utm_medium\u003dintegration\u0026utm_content\u003dv3.8.0)"},{"name":"CVE-2023-20863","scannerType":"OPENSOURCE","description":"In spring framework versions prior to 5.2.24 release+ ,5.3.27+ and 6.0.8+ , it is possible for a user to provide a specially crafted SpEL expression that may cause a denial-of-service (DoS) condition.","severity":"MEDIUM","packageName":"spring-expression","packageVersion":"3.0.5.RELEASE","references":"* [https://ossindex.sonatype.org/vulnerability/CVE-2023-20863?component-type\u003dmaven\u0026component-name\u003dorg.springframework%2Fspring-expression\u0026utm_source\u003ddependency-track\u0026utm_medium\u003dintegration\u0026utm_content\u003dv3.8.0](https://ossindex.sonatype.org/vulnerability/CVE-2023-20863?component-type\u003dmaven\u0026component-name\u003dorg.springframework%2Fspring-expression\u0026utm_source\u003ddependency-track\u0026utm_medium\u003dintegration\u0026utm_content\u003dv3.8.0)"},{"name":"CVE-2018-1270","scannerType":"OPENSOURCE","description":"Spring Framework, versions 5.0 prior to 5.0.5 and versions 4.3 prior to 4.3.15 and older unsupported versions, allow applications to expose STOMP over WebSocket endpoints with a simple, in-memory STOMP broker through the spring-messaging module. A malicious user (or attacker) can craft a message to the broker that can lead to a remote code execution attack.","severity":"CRITICAL","packageName":"spring-expression","packageVersion":"3.0.5.RELEASE","references":"* [https://ossindex.sonatype.org/vulnerability/CVE-2018-1270?component-type\u003dmaven\u0026component-name\u003dorg.springframework%2Fspring-expression\u0026utm_source\u003ddependency-track\u0026utm_medium\u003dintegration\u0026utm_content\u003dv3.8.0](https://ossindex.sonatype.org/vulnerability/CVE-2018-1270?component-type\u003dmaven\u0026component-name\u003dorg.springframework%2Fspring-expression\u0026utm_source\u003ddependency-track\u0026utm_medium\u003dintegration\u0026utm_content\u003dv3.8.0)"},{"name":"CVE-2013-6430","scannerType":"OPENSOURCE","description":"The JavaScriptUtils.javaScriptEscape method in web/util/JavaScriptUtils.java in Spring MVC in Spring Framework before 3.2.2 does not properly escape certain characters, which allows remote attackers to conduct cross-site scripting (XSS) attacks via a (1) line separator or (2) paragraph separator Unicode character or (3) left or (4) right angle bracket.","severity":"MEDIUM","packageName":"spring-web","packageVersion":"3.0.5.RELEASE","references":"* [https://ossindex.sonatype.org/vulnerability/CVE-2013-6430?component-type\u003dmaven\u0026component-name\u003dorg.springframework%2Fspring-web\u0026utm_source\u003ddependency-track\u0026utm_medium\u003dintegration\u0026utm_content\u003dv3.8.0](https://ossindex.sonatype.org/vulnerability/CVE-2013-6430?component-type\u003dmaven\u0026component-name\u003dorg.springframework%2Fspring-web\u0026utm_source\u003ddependency-track\u0026utm_medium\u003dintegration\u0026utm_content\u003dv3.8.0)"},{"name":"CVE-2018-11039","scannerType":"OPENSOURCE","description":"Spring Framework (versions 5.0.x prior to 5.0.7, versions 4.3.x prior to 4.3.18, and older unsupported versions) allow web applications to change the HTTP request method to any HTTP method (including TRACE) using the HiddenHttpMethodFilter in Spring MVC. If an application has a pre-existing XSS vulnerability, a malicious user (or attacker) can use this filter to escalate to an XST (Cross Site Tracing) attack.","severity":"MEDIUM","packageName":"spring-web","packageVersion":"3.0.5.RELEASE","references":"* [https://ossindex.sonatype.org/vulnerability/CVE-2018-11039?component-type\u003dmaven\u0026component-name\u003dorg.springframework%2Fspring-web\u0026utm_source\u003ddependency-track\u0026utm_medium\u003dintegration\u0026utm_content\u003dv3.8.0](https://ossindex.sonatype.org/vulnerability/CVE-2018-11039?component-type\u003dmaven\u0026component-name\u003dorg.springframework%2Fspring-web\u0026utm_source\u003ddependency-track\u0026utm_medium\u003dintegration\u0026utm_content\u003dv3.8.0)"},{"name":"CVE-2018-1272","scannerType":"OPENSOURCE","description":"Spring Framework, versions 5.0 prior to 5.0.5 and versions 4.3 prior to 4.3.15 and older unsupported versions, provide client-side support for multipart requests. When Spring MVC or Spring WebFlux server application (server A) receives input from a remote client, and then uses that input to make a multipart request to another server (server B), it can be exposed to an attack, where an extra multipart is inserted in the content of the request from server A, causing server B to use the wrong value for a part it expects. This could to lead privilege escalation, for example, if the part content represents a username or user roles.","severity":"HIGH","packageName":"spring-web","packageVersion":"3.0.5.RELEASE","references":"* [https://ossindex.sonatype.org/vulnerability/CVE-2018-1272?component-type\u003dmaven\u0026component-name\u003dorg.springframework%2Fspring-web\u0026utm_source\u003ddependency-track\u0026utm_medium\u003dintegration\u0026utm_content\u003dv3.8.0](https://ossindex.sonatype.org/vulnerability/CVE-2018-1272?component-type\u003dmaven\u0026component-name\u003dorg.springframework%2Fspring-web\u0026utm_source\u003ddependency-track\u0026utm_medium\u003dintegration\u0026utm_content\u003dv3.8.0)"},{"name":"CVE-2014-0225","scannerType":"OPENSOURCE","description":"When processing user provided XML documents, the Spring Framework 4.0.0 to 4.0.4, 3.0.0 to 3.2.8, and possibly earlier unsupported versions did not disable by default the resolution of URI references in a DTD declaration. This enabled an XXE attack.","severity":"HIGH","packageName":"spring-web","packageVersion":"3.0.5.RELEASE","references":"* [https://ossindex.sonatype.org/vulnerability/CVE-2014-0225?component-type\u003dmaven\u0026component-name\u003dorg.springframework%2Fspring-web\u0026utm_source\u003ddependency-track\u0026utm_medium\u003dintegration\u0026utm_content\u003dv3.8.0](https://ossindex.sonatype.org/vulnerability/CVE-2014-0225?component-type\u003dmaven\u0026component-name\u003dorg.springframework%2Fspring-web\u0026utm_source\u003ddependency-track\u0026utm_medium\u003dintegration\u0026utm_content\u003dv3.8.0)"},{"name":"CVE-2016-1000027","scannerType":"OPENSOURCE","description":"Pivotal Spring Framework through 5.3.16 suffers from a potential remote code execution (RCE) issue if used for Java deserialization of untrusted data. Depending on how the library is implemented within a product, this issue may or not occur, and authentication may be required. NOTE: the vendor\u0027s position is that untrusted data is not an intended use case. The product\u0027s behavior will not be changed because some users rely on deserialization of trusted data.","severity":"CRITICAL","packageName":"spring-web","packageVersion":"3.0.5.RELEASE","references":"* [https://ossindex.sonatype.org/vulnerability/CVE-2016-1000027?component-type\u003dmaven\u0026component-name\u003dorg.springframework%2Fspring-web\u0026utm_source\u003ddependency-track\u0026utm_medium\u003dintegration\u0026utm_content\u003dv3.8.0](https://ossindex.sonatype.org/vulnerability/CVE-2016-1000027?component-type\u003dmaven\u0026component-name\u003dorg.springframework%2Fspring-web\u0026utm_source\u003ddependency-track\u0026utm_medium\u003dintegration\u0026utm_content\u003dv3.8.0)"},{"name":"CVE-2014-0054","scannerType":"OPENSOURCE","description":"The Jaxb2RootElementHttpMessageConverter in Spring MVC in Spring Framework before 3.2.8 and 4.0.0 before 4.0.2 does not disable external entity resolution, which allows remote attackers to read arbitrary files, cause a denial of service, and conduct CSRF attacks via crafted XML, aka an XML External Entity (XXE) issue.  NOTE: this vulnerability exists because of an incomplete fix for CVE-2013-4152, CVE-2013-7315, and CVE-2013-6429.","severity":"MEDIUM","packageName":"spring-web","packageVersion":"3.0.5.RELEASE","references":"* [https://ossindex.sonatype.org/vulnerability/CVE-2014-0054?component-type\u003dmaven\u0026component-name\u003dorg.springframework%2Fspring-web\u0026utm_source\u003ddependency-track\u0026utm_medium\u003dintegration\u0026utm_content\u003dv3.8.0](https://ossindex.sonatype.org/vulnerability/CVE-2014-0054?component-type\u003dmaven\u0026component-name\u003dorg.springframework%2Fspring-web\u0026utm_source\u003ddependency-track\u0026utm_medium\u003dintegration\u0026utm_content\u003dv3.8.0)"},{"name":"CVE-2013-6429","scannerType":"OPENSOURCE","description":"The SourceHttpMessageConverter in Spring MVC in Spring Framework before 3.2.5 and 4.0.0.M1 through 4.0.0.RC1 does not disable external entity resolution, which allows remote attackers to read arbitrary files, cause a denial of service, and conduct CSRF attacks via crafted XML, aka an XML External Entity (XXE) issue, and a different vulnerability than CVE-2013-4152 and CVE-2013-7315.","severity":"MEDIUM","packageName":"spring-web","packageVersion":"3.0.5.RELEASE","references":"* [https://ossindex.sonatype.org/vulnerability/CVE-2013-6429?component-type\u003dmaven\u0026component-name\u003dorg.springframework%2Fspring-web\u0026utm_source\u003ddependency-track\u0026utm_medium\u003dintegration\u0026utm_content\u003dv3.8.0](https://ossindex.sonatype.org/vulnerability/CVE-2013-6429?component-type\u003dmaven\u0026component-name\u003dorg.springframework%2Fspring-web\u0026utm_source\u003ddependency-track\u0026utm_medium\u003dintegration\u0026utm_content\u003dv3.8.0)"},{"name":"CVE-2011-2730","scannerType":"OPENSOURCE","description":"VMware SpringSource Spring Framework before 2.5.6.SEC03, 2.5.7.SR023, and 3.x before 3.0.6, when a container supports Expression Language (EL), evaluates EL expressions in tags twice, which allows remote attackers to obtain sensitive information via a (1) name attribute in a (a) spring:hasBindErrors tag; (2) path attribute in a (b) spring:bind or (c) spring:nestedpath tag; (3) arguments, (4) code, (5) text, (6) var, (7) scope, or (8) message attribute in a (d) spring:message or (e) spring:theme tag; or (9) var, (10) scope, or (11) value attribute in a (f) spring:transform tag, aka \"Expression Language Injection.\"","severity":"HIGH","packageName":"spring-web","packageVersion":"3.0.5.RELEASE","references":"* [https://ossindex.sonatype.org/vulnerability/CVE-2011-2730?component-type\u003dmaven\u0026component-name\u003dorg.springframework%2Fspring-web\u0026utm_source\u003ddependency-track\u0026utm_medium\u003dintegration\u0026utm_content\u003dv3.8.0](https://ossindex.sonatype.org/vulnerability/CVE-2011-2730?component-type\u003dmaven\u0026component-name\u003dorg.springframework%2Fspring-web\u0026utm_source\u003ddependency-track\u0026utm_medium\u003dintegration\u0026utm_content\u003dv3.8.0)"},{"name":"CVE-2015-0899","scannerType":"OPENSOURCE","description":"The MultiPageValidator implementation in Apache Struts 1 1.1 through 1.3.10 allows remote attackers to bypass intended access restrictions via a modified page parameter.","severity":"HIGH","packageName":"struts-core","packageVersion":"1.3.8","references":"* [https://ossindex.sonatype.org/vulnerability/CVE-2015-0899?component-type\u003dmaven\u0026component-name\u003dorg.apache.struts%2Fstruts-core\u0026utm_source\u003ddependency-track\u0026utm_medium\u003dintegration\u0026utm_content\u003dv3.8.0](https://ossindex.sonatype.org/vulnerability/CVE-2015-0899?component-type\u003dmaven\u0026component-name\u003dorg.apache.struts%2Fstruts-core\u0026utm_source\u003ddependency-track\u0026utm_medium\u003dintegration\u0026utm_content\u003dv3.8.0)"},{"name":"CVE-2016-1181","scannerType":"OPENSOURCE","description":"ActionServlet.java in Apache Struts 1 1.x through 1.3.10 mishandles multithreaded access to an ActionForm instance, which allows remote attackers to execute arbitrary code or cause a denial of service (unexpected memory access) via a multipart request, a related issue to CVE-2015-0899.","severity":"HIGH","packageName":"struts-core","packageVersion":"1.3.8","references":"* [https://ossindex.sonatype.org/vulnerability/CVE-2016-1181?component-type\u003dmaven\u0026component-name\u003dorg.apache.struts%2Fstruts-core\u0026utm_source\u003ddependency-track\u0026utm_medium\u003dintegration\u0026utm_content\u003dv3.8.0](https://ossindex.sonatype.org/vulnerability/CVE-2016-1181?component-type\u003dmaven\u0026component-name\u003dorg.apache.struts%2Fstruts-core\u0026utm_source\u003ddependency-track\u0026utm_medium\u003dintegration\u0026utm_content\u003dv3.8.0)"},{"name":"CVE-2016-1182","scannerType":"OPENSOURCE","description":"ActionServlet.java in Apache Struts 1 1.x through 1.3.10 does not properly restrict the Validator configuration, which allows remote attackers to conduct cross-site scripting (XSS) attacks or cause a denial of service via crafted input, a related issue to CVE-2015-0899.","severity":"HIGH","packageName":"struts-core","packageVersion":"1.3.8","references":"* [https://ossindex.sonatype.org/vulnerability/CVE-2016-1182?component-type\u003dmaven\u0026component-name\u003dorg.apache.struts%2Fstruts-core\u0026utm_source\u003ddependency-track\u0026utm_medium\u003dintegration\u0026utm_content\u003dv3.8.0](https://ossindex.sonatype.org/vulnerability/CVE-2016-1182?component-type\u003dmaven\u0026component-name\u003dorg.apache.struts%2Fstruts-core\u0026utm_source\u003ddependency-track\u0026utm_medium\u003dintegration\u0026utm_content\u003dv3.8.0)"},{"name":"CVE-2014-0114","scannerType":"OPENSOURCE","description":"Apache Commons BeanUtils, as distributed in lib/commons-beanutils-1.8.0.jar in Apache Struts 1.x through 1.3.10 and in other products requiring commons-beanutils through 1.9.2, does not suppress the class property, which allows remote attackers to \"manipulate\" the ClassLoader and execute arbitrary code via the class parameter, as demonstrated by the passing of this parameter to the getClass method of the ActionForm object in Struts 1.","severity":"HIGH","packageName":"struts-core","packageVersion":"1.3.8","references":"* [https://ossindex.sonatype.org/vulnerability/CVE-2014-0114?component-type\u003dmaven\u0026component-name\u003dcommons-beanutils%2Fcommons-beanutils\u0026utm_source\u003ddependency-track\u0026utm_medium\u003dintegration\u0026utm_content\u003dv3.8.0](https://ossindex.sonatype.org/vulnerability/CVE-2014-0114?component-type\u003dmaven\u0026component-name\u003dcommons-beanutils%2Fcommons-beanutils\u0026utm_source\u003ddependency-track\u0026utm_medium\u003dintegration\u0026utm_content\u003dv3.8.0)"},{"name":"CVE-2018-11776","scannerType":"OPENSOURCE","description":"Apache Struts versions 2.3 to 2.3.34 and 2.5 to 2.5.16 suffer from possible Remote Code Execution when alwaysSelectFullNamespace is true (either by user or a plugin like Convention Plugin) and then: results are used with no namespace and in same time, its upper package have no or wildcard namespace and similar to results, same possibility when using url tag which doesn\u0027t have value and action set and in same time, its upper package have no or wildcard namespace.","severity":"HIGH","packageName":"struts2-core","packageVersion":"2.3.30","references":"* [https://ossindex.sonatype.org/vulnerability/CVE-2018-11776?component-type\u003dmaven\u0026component-name\u003dorg.apache.struts%2Fstruts2-core\u0026utm_source\u003ddependency-track\u0026utm_medium\u003dintegration\u0026utm_content\u003dv3.8.0](https://ossindex.sonatype.org/vulnerability/CVE-2018-11776?component-type\u003dmaven\u0026component-name\u003dorg.apache.struts%2Fstruts2-core\u0026utm_source\u003ddependency-track\u0026utm_medium\u003dintegration\u0026utm_content\u003dv3.8.0)"},{"name":"CVE-2019-0230","scannerType":"OPENSOURCE","description":"Apache Struts 2.0.0 to 2.5.20 forced double OGNL evaluation, when evaluated on raw user input in tag attributes, may lead to remote code execution.","severity":"CRITICAL","packageName":"struts2-core","packageVersion":"2.3.30","references":"* [https://ossindex.sonatype.org/vulnerability/CVE-2019-0230?component-type\u003dmaven\u0026component-name\u003dorg.apache.struts%2Fstruts2-core\u0026utm_source\u003ddependency-track\u0026utm_medium\u003dintegration\u0026utm_content\u003dv3.8.0](https://ossindex.sonatype.org/vulnerability/CVE-2019-0230?component-type\u003dmaven\u0026component-name\u003dorg.apache.struts%2Fstruts2-core\u0026utm_source\u003ddependency-track\u0026utm_medium\u003dintegration\u0026utm_content\u003dv3.8.0)"},{"name":"CVE-2017-12611","scannerType":"OPENSOURCE","description":"In Apache Struts 2.0.0 through 2.3.33 and 2.5 through 2.5.10.1, using an unintentional expression in a Freemarker tag instead of string literals can lead to a RCE attack.","severity":"CRITICAL","packageName":"struts2-core","packageVersion":"2.3.30","references":"* [https://ossindex.sonatype.org/vulnerability/CVE-2017-12611?component-type\u003dmaven\u0026component-name\u003dorg.apache.struts%2Fstruts2-core\u0026utm_source\u003ddependency-track\u0026utm_medium\u003dintegration\u0026utm_content\u003dv3.8.0](https://ossindex.sonatype.org/vulnerability/CVE-2017-12611?component-type\u003dmaven\u0026component-name\u003dorg.apache.struts%2Fstruts2-core\u0026utm_source\u003ddependency-track\u0026utm_medium\u003dintegration\u0026utm_content\u003dv3.8.0)"},{"name":"CVE-2020-17530","scannerType":"OPENSOURCE","description":"Forced OGNL evaluation, when evaluated on raw user input in tag attributes, may lead to remote code execution. Affected software : Apache Struts 2.0.0 - Struts 2.5.25.","severity":"CRITICAL","packageName":"struts2-core","packageVersion":"2.3.30","references":"* [https://ossindex.sonatype.org/vulnerability/CVE-2020-17530?component-type\u003dmaven\u0026component-name\u003dorg.apache.struts%2Fstruts2-core\u0026utm_source\u003ddependency-track\u0026utm_medium\u003dintegration\u0026utm_content\u003dv3.8.0](https://ossindex.sonatype.org/vulnerability/CVE-2020-17530?component-type\u003dmaven\u0026component-name\u003dorg.apache.struts%2Fstruts2-core\u0026utm_source\u003ddependency-track\u0026utm_medium\u003dintegration\u0026utm_content\u003dv3.8.0)"},{"name":"CVE-2017-5638","scannerType":"OPENSOURCE","description":"The Jakarta Multipart parser in Apache Struts 2 2.3.x before 2.3.32 and 2.5.x before 2.5.10.1 has incorrect exception handling and error-message generation during file-upload attempts, which allows remote attackers to execute arbitrary commands via a crafted Content-Type, Content-Disposition, or Content-Length HTTP header, as exploited in the wild in March 2017 with a Content-Type header containing a #cmd\u003d string.","severity":"CRITICAL","packageName":"struts2-core","packageVersion":"2.3.30","references":"* [https://ossindex.sonatype.org/vulnerability/CVE-2017-5638?component-type\u003dmaven\u0026component-name\u003dorg.apache.struts%2Fstruts2-core\u0026utm_source\u003ddependency-track\u0026utm_medium\u003dintegration\u0026utm_content\u003dv3.8.0](https://ossindex.sonatype.org/vulnerability/CVE-2017-5638?component-type\u003dmaven\u0026component-name\u003dorg.apache.struts%2Fstruts2-core\u0026utm_source\u003ddependency-track\u0026utm_medium\u003dintegration\u0026utm_content\u003dv3.8.0)"},{"name":"CVE-2020-13936","scannerType":"OPENSOURCE","description":"An attacker that is able to modify Velocity templates may execute arbitrary Java code or run arbitrary system commands with the same privileges as the account running the Servlet container. This applies to applications that allow untrusted users to upload/modify velocity templates running Apache Velocity Engine versions up to 2.2.","severity":"HIGH","packageName":"velocity","packageVersion":"1.6.2","references":"* [https://ossindex.sonatype.org/vulnerability/CVE-2020-13936?component-type\u003dmaven\u0026component-name\u003dorg.apache.velocity%2Fvelocity\u0026utm_source\u003ddependency-track\u0026utm_medium\u003dintegration\u0026utm_content\u003dv3.8.0](https://ossindex.sonatype.org/vulnerability/CVE-2020-13936?component-type\u003dmaven\u0026component-name\u003dorg.apache.velocity%2Fvelocity\u0026utm_source\u003ddependency-track\u0026utm_medium\u003dintegration\u0026utm_content\u003dv3.8.0)"},{"name":"CVE-2020-13959","scannerType":"OPENSOURCE","description":"Apache Velocity Tools - Cross-Site Scripting (XSS) [ CVE-2020-13959 ]\n\nThe software does not neutralize or incorrectly neutralizes user-controllable input before it is placed in output that is used as a web page that is served to other users.","severity":"MEDIUM","packageName":"velocity-tools","packageVersion":"2.0","references":"* [https://ossindex.sonatype.org/vulnerability/CVE-2020-13959?component-type\u003dmaven\u0026component-name\u003dorg.apache.velocity%2Fvelocity-tools\u0026utm_source\u003ddependency-track\u0026utm_medium\u003dintegration\u0026utm_content\u003dv3.8.0](https://ossindex.sonatype.org/vulnerability/CVE-2020-13959?component-type\u003dmaven\u0026component-name\u003dorg.apache.velocity%2Fvelocity-tools\u0026utm_source\u003ddependency-track\u0026utm_medium\u003dintegration\u0026utm_content\u003dv3.8.0)"},{"name":"CVE-2017-7672","scannerType":"OPENSOURCE","description":"If an application allows enter an URL in a form field and built-in URLValidator is used, it is possible to prepare a special URL which will be used to overload server process when performing validation of the URL. Solution is to upgrade to Apache Struts version 2.5.12.","severity":"MEDIUM","packageName":"xwork-core","packageVersion":"2.3.30","references":"* [https://ossindex.sonatype.org/vulnerability/CVE-2017-7672?component-type\u003dmaven\u0026component-name\u003dorg.apache.struts.xwork%2Fxwork-core\u0026utm_source\u003ddependency-track\u0026utm_medium\u003dintegration\u0026utm_content\u003dv3.8.0](https://ossindex.sonatype.org/vulnerability/CVE-2017-7672?component-type\u003dmaven\u0026component-name\u003dorg.apache.struts.xwork%2Fxwork-core\u0026utm_source\u003ddependency-track\u0026utm_medium\u003dintegration\u0026utm_content\u003dv3.8.0)"},{"name":"CVE-2016-8738","scannerType":"OPENSOURCE","description":"Struts2 - Regular Expression Denial of Service (ReDoS) [CVE-2016-8738]\n\nThe product does not validate or incorrectly validates input that can affect the control flow or data flow of a program.","severity":"MEDIUM","packageName":"xwork-core","packageVersion":"2.3.30","references":"* [https://ossindex.sonatype.org/vulnerability/CVE-2016-8738?component-type\u003dmaven\u0026component-name\u003dorg.apache.struts.xwork%2Fxwork-core\u0026utm_source\u003ddependency-track\u0026utm_medium\u003dintegration\u0026utm_content\u003dv3.8.0](https://ossindex.sonatype.org/vulnerability/CVE-2016-8738?component-type\u003dmaven\u0026component-name\u003dorg.apache.struts.xwork%2Fxwork-core\u0026utm_source\u003ddependency-track\u0026utm_medium\u003dintegration\u0026utm_content\u003dv3.8.0)"},{"name":"CVE-2017-9787","scannerType":"OPENSOURCE","description":"Struts 2 - OGNL access to class members of Spring proxy\n\nThe software does not restrict or incorrectly restricts access to a resource from an unauthorized actor.","severity":"HIGH","packageName":"xwork-core","packageVersion":"2.3.30","references":"* [https://ossindex.sonatype.org/vulnerability/CVE-2017-9787?component-type\u003dmaven\u0026component-name\u003dorg.apache.struts.xwork%2Fxwork-core\u0026utm_source\u003ddependency-track\u0026utm_medium\u003dintegration\u0026utm_content\u003dv3.8.0](https://ossindex.sonatype.org/vulnerability/CVE-2017-9787?component-type\u003dmaven\u0026component-name\u003dorg.apache.struts.xwork%2Fxwork-core\u0026utm_source\u003ddependency-track\u0026utm_medium\u003dintegration\u0026utm_content\u003dv3.8.0)"},{"name":"CVE-2017-9804","scannerType":"OPENSOURCE","description":"In Apache Struts 2.3.7 through 2.3.33 and 2.5 through 2.5.12, if an application allows entering a URL in a form field and built-in URLValidator is used, it is possible to prepare a special URL which will be used to overload server process when performing validation of the URL.  NOTE: this vulnerability exists because of an incomplete fix for S2-047 / CVE-2017-7672.","severity":"HIGH","packageName":"xwork-core","packageVersion":"2.3.30","references":"* [https://ossindex.sonatype.org/vulnerability/CVE-2017-9804?component-type\u003dmaven\u0026component-name\u003dorg.apache.struts.xwork%2Fxwork-core\u0026utm_source\u003ddependency-track\u0026utm_medium\u003dintegration\u0026utm_content\u003dv3.8.0](https://ossindex.sonatype.org/vulnerability/CVE-2017-9804?component-type\u003dmaven\u0026component-name\u003dorg.apache.struts.xwork%2Fxwork-core\u0026utm_source\u003ddependency-track\u0026utm_medium\u003dintegration\u0026utm_content\u003dv3.8.0)"},{"name":"CVE-2019-0233","scannerType":"OPENSOURCE","description":"An access permission override in Apache Struts 2.0.0 to 2.5.20 may cause a Denial of Service when performing a file upload.","severity":"HIGH","packageName":"xwork-core","packageVersion":"2.3.30","references":"* [https://ossindex.sonatype.org/vulnerability/CVE-2019-0233?component-type\u003dmaven\u0026component-name\u003dorg.apache.struts.xwork%2Fxwork-core\u0026utm_source\u003ddependency-track\u0026utm_medium\u003dintegration\u0026utm_content\u003dv3.8.0](https://ossindex.sonatype.org/vulnerability/CVE-2019-0233?component-type\u003dmaven\u0026component-name\u003dorg.apache.struts.xwork%2Fxwork-core\u0026utm_source\u003ddependency-track\u0026utm_medium\u003dintegration\u0026utm_content\u003dv3.8.0)"},{"name":"Field isn\u0027t final but should be","scannerType":"SAST","description":"\n\n   \u003cp\u003e\nThis static field public but not final, and\ncould be changed by malicious code or\n        by accident from another package.\n        The field could be made final to avoid\n        this vulnerability.\u003c/p\u003e\n\n    ","filename":"com/appsecco/dvja/Constant.java","line":"4","severity":"Low","category":"MALICIOUS_CODE"},{"name":"Field isn\u0027t final but should be","scannerType":"SAST","description":"\n\n   \u003cp\u003e\nThis static field public but not final, and\ncould be changed by malicious code or\n        by accident from another package.\n        The field could be made final to avoid\n        this vulnerability.\u003c/p\u003e\n\n    ","filename":"com/appsecco/dvja/Constant.java","line":"6","severity":"Low","category":"MALICIOUS_CODE"},{"name":"Field isn\u0027t final but should be","scannerType":"SAST","description":"\n\n   \u003cp\u003e\nThis static field public but not final, and\ncould be changed by malicious code or\n        by accident from another package.\n        The field could be made final to avoid\n        this vulnerability.\u003c/p\u003e\n\n    ","filename":"com/appsecco/dvja/Constant.java","line":"7","severity":"Low","category":"MALICIOUS_CODE"},{"name":"Field isn\u0027t final but should be","scannerType":"SAST","description":"\n\n   \u003cp\u003e\nThis static field public but not final, and\ncould be changed by malicious code or\n        by accident from another package.\n        The field could be made final to avoid\n        this vulnerability.\u003c/p\u003e\n\n    ","filename":"com/appsecco/dvja/Constant.java","line":"5","severity":"Low","category":"MALICIOUS_CODE"},{"name":"Potentially sensitive data in a cookie","scannerType":"SAST","description":"\n            \n\u003cp\u003eThe information stored in a custom cookie should not be sensitive or related to the session. In most cases, sensitive data should only be stored in session\nand referenced by the user\u0027s session cookie. See HttpSession (\u003ccode\u003eHttpServletRequest.getSession()\u003c/code\u003e)\u003c/p\u003e\n\u003cp\u003eCustom cookies can be used for information that needs to live longer than and is independent of a specific session.\u003c/p\u003e\n\u003cbr/\u003e\n\u003cp\u003e\n\u003cb\u003eReference\u003c/b\u003e\u003cbr/\u003e\n\u003ca href\u003d\"https://cwe.mitre.org/data/definitions/315.html\"\u003eCWE-315: Cleartext Storage of Sensitive Information in a Cookie\u003c/a\u003e\n\u003c/p\u003e\n\n        ","filename":"com/appsecco/dvja/controllers/ApiAction.java","line":"40","severity":"Low","category":"SECURITY"},{"name":"Found Struts 2 endpoint","scannerType":"SAST","description":"\n            \n\u003cp\u003eIn Struts 2, the endpoints are Plain Old Java Objects (POJO) which means no Interface/Class needs to be implemented/extended.\u003c/p\u003e\n\u003cp\u003eWhen a request is routed to its controller (like the selected class), the supplied HTTP parameters are automatically mapped to setters for\nthe class. Therefore, all setters of this class should be considered as untrusted input even if the form doesn\u0027t include those values.\nAn attacker can simply provide additional values in the request, and they will be set in the object anyway, as long as that object has\nsuch a setter. The use of these parameters should be reviewed to make sure they are used safely.\u003c/p\u003e\n\n        ","filename":"com/appsecco/dvja/controllers/Home.java","line":"8","severity":"Low","category":"SECURITY"},{"name":"Found Struts 2 endpoint","scannerType":"SAST","description":"\n            \n\u003cp\u003eIn Struts 2, the endpoints are Plain Old Java Objects (POJO) which means no Interface/Class needs to be implemented/extended.\u003c/p\u003e\n\u003cp\u003eWhen a request is routed to its controller (like the selected class), the supplied HTTP parameters are automatically mapped to setters for\nthe class. Therefore, all setters of this class should be considered as untrusted input even if the form doesn\u0027t include those values.\nAn attacker can simply provide additional values in the request, and they will be set in the object anyway, as long as that object has\nsuch a setter. The use of these parameters should be reviewed to make sure they are used safely.\u003c/p\u003e\n\n        ","filename":"com/appsecco/dvja/controllers/Login.java","line":"7","severity":"Low","category":"SECURITY"},{"name":"Potential Command Injection","scannerType":"SAST","description":"\n            \n\u003cp\u003eThe highlighted API is used to execute a system command. If unfiltered input is passed to this API, it can lead to arbitrary command execution.\u003c/p\u003e\n\u003cbr/\u003e\n\u003cp\u003e\n    \u003cb\u003eVulnerable Code:\u003c/b\u003e\u003cbr/\u003e\n\u003cpre\u003eimport java.lang.Runtime;\n\nRuntime r \u003d Runtime.getRuntime();\nr.exec(\"/bin/sh -c some_tool\" + input);\u003c/pre\u003e\n\u003c/p\u003e\n\u003cp\u003e\n\u003cb\u003eReferences\u003c/b\u003e\u003cbr/\u003e\n\u003ca href\u003d\"https://www.owasp.org/index.php/Command_Injection\"\u003eOWASP: Command Injection\u003c/a\u003e\u003cbr/\u003e\n\u003ca href\u003d\"https://www.owasp.org/index.php/Top_10_2013-A1-Injection\"\u003eOWASP: Top 10 2013-A1-Injection\u003c/a\u003e\u003cbr/\u003e\n\u003ca href\u003d\"https://cwe.mitre.org/data/definitions/78.html\"\u003eCWE-78: Improper Neutralization of Special Elements used in an OS Command (\u0027OS Command Injection\u0027)\u003c/a\u003e\n\u003c/p\u003e\n\n        ","filename":"com/appsecco/dvja/controllers/PingAction.java","line":"45","severity":"Medium","category":"SECURITY"},{"name":"Found Struts 2 endpoint","scannerType":"SAST","description":"\n            \n\u003cp\u003eIn Struts 2, the endpoints are Plain Old Java Objects (POJO) which means no Interface/Class needs to be implemented/extended.\u003c/p\u003e\n\u003cp\u003eWhen a request is routed to its controller (like the selected class), the supplied HTTP parameters are automatically mapped to setters for\nthe class. Therefore, all setters of this class should be considered as untrusted input even if the form doesn\u0027t include those values.\nAn attacker can simply provide additional values in the request, and they will be set in the object anyway, as long as that object has\nsuch a setter. The use of these parameters should be reviewed to make sure they are used safely.\u003c/p\u003e\n\n        ","filename":"com/appsecco/dvja/controllers/PingAction.java","line":"9","severity":"Low","category":"SECURITY"},{"name":"Found Struts 2 endpoint","scannerType":"SAST","description":"\n            \n\u003cp\u003eIn Struts 2, the endpoints are Plain Old Java Objects (POJO) which means no Interface/Class needs to be implemented/extended.\u003c/p\u003e\n\u003cp\u003eWhen a request is routed to its controller (like the selected class), the supplied HTTP parameters are automatically mapped to setters for\nthe class. Therefore, all setters of this class should be considered as untrusted input even if the form doesn\u0027t include those values.\nAn attacker can simply provide additional values in the request, and they will be set in the object anyway, as long as that object has\nsuch a setter. The use of these parameters should be reviewed to make sure they are used safely.\u003c/p\u003e\n\n        ","filename":"com/appsecco/dvja/controllers/ProductAction.java","line":"11","severity":"Low","category":"SECURITY"},{"name":"Found Struts 2 endpoint","scannerType":"SAST","description":"\n            \n\u003cp\u003eIn Struts 2, the endpoints are Plain Old Java Objects (POJO) which means no Interface/Class needs to be implemented/extended.\u003c/p\u003e\n\u003cp\u003eWhen a request is routed to its controller (like the selected class), the supplied HTTP parameters are automatically mapped to setters for\nthe class. Therefore, all setters of this class should be considered as untrusted input even if the form doesn\u0027t include those values.\nAn attacker can simply provide additional values in the request, and they will be set in the object anyway, as long as that object has\nsuch a setter. The use of these parameters should be reviewed to make sure they are used safely.\u003c/p\u003e\n\n        ","filename":"com/appsecco/dvja/controllers/RedirectAction.java","line":"5","severity":"Low","category":"SECURITY"},{"name":"Found Struts 2 endpoint","scannerType":"SAST","description":"\n            \n\u003cp\u003eIn Struts 2, the endpoints are Plain Old Java Objects (POJO) which means no Interface/Class needs to be implemented/extended.\u003c/p\u003e\n\u003cp\u003eWhen a request is routed to its controller (like the selected class), the supplied HTTP parameters are automatically mapped to setters for\nthe class. Therefore, all setters of this class should be considered as untrusted input even if the form doesn\u0027t include those values.\nAn attacker can simply provide additional values in the request, and they will be set in the object anyway, as long as that object has\nsuch a setter. The use of these parameters should be reviewed to make sure they are used safely.\u003c/p\u003e\n\n        ","filename":"com/appsecco/dvja/controllers/Register.java","line":"7","severity":"Low","category":"SECURITY"},{"name":"Found Struts 2 endpoint","scannerType":"SAST","description":"\n            \n\u003cp\u003eIn Struts 2, the endpoints are Plain Old Java Objects (POJO) which means no Interface/Class needs to be implemented/extended.\u003c/p\u003e\n\u003cp\u003eWhen a request is routed to its controller (like the selected class), the supplied HTTP parameters are automatically mapped to setters for\nthe class. Therefore, all setters of this class should be considered as untrusted input even if the form doesn\u0027t include those values.\nAn attacker can simply provide additional values in the request, and they will be set in the object anyway, as long as that object has\nsuch a setter. The use of these parameters should be reviewed to make sure they are used safely.\u003c/p\u003e\n\n        ","filename":"com/appsecco/dvja/controllers/ResetPassword.java","line":"6","severity":"Low","category":"SECURITY"},{"name":"May expose internal representation by returning reference to mutable object","scannerType":"SAST","description":"\n\n  \u003cp\u003e Returning a reference to a mutable object value stored in one of the object\u0027s fields\n  exposes the internal representation of the object.\u0026nbsp;\n   If instances\n   are accessed by untrusted code, and unchecked changes to\n   the mutable object would compromise security or other\n   important properties, you will need to do something different.\n  Returning a new copy of the object is better approach in many situations.\u003c/p\u003e\n\n    ","filename":"com/appsecco/dvja/models/Product.java","line":"77","severity":"Low","category":"MALICIOUS_CODE"},{"name":"May expose internal representation by returning reference to mutable object","scannerType":"SAST","description":"\n\n  \u003cp\u003e Returning a reference to a mutable object value stored in one of the object\u0027s fields\n  exposes the internal representation of the object.\u0026nbsp;\n   If instances\n   are accessed by untrusted code, and unchecked changes to\n   the mutable object would compromise security or other\n   important properties, you will need to do something different.\n  Returning a new copy of the object is better approach in many situations.\u003c/p\u003e\n\n    ","filename":"com/appsecco/dvja/models/Product.java","line":"85","severity":"Low","category":"MALICIOUS_CODE"},{"name":"May expose internal representation by incorporating reference to mutable object","scannerType":"SAST","description":"\n\n  \u003cp\u003e This code stores a reference to an externally mutable object into the\n  internal representation of the object.\u0026nbsp;\n   If instances\n   are accessed by untrusted code, and unchecked changes to\n   the mutable object would compromise security or other\n   important properties, you will need to do something different.\n  Storing a copy of the object is better approach in many situations.\u003c/p\u003e\n\n    ","filename":"com/appsecco/dvja/models/Product.java","line":"81","severity":"Low","category":"MALICIOUS_CODE"},{"name":"May expose internal representation by incorporating reference to mutable object","scannerType":"SAST","description":"\n\n  \u003cp\u003e This code stores a reference to an externally mutable object into the\n  internal representation of the object.\u0026nbsp;\n   If instances\n   are accessed by untrusted code, and unchecked changes to\n   the mutable object would compromise security or other\n   important properties, you will need to do something different.\n  Storing a copy of the object is better approach in many situations.\u003c/p\u003e\n\n    ","filename":"com/appsecco/dvja/models/Product.java","line":"89","severity":"Low","category":"MALICIOUS_CODE"},{"name":"Potential CRLF Injection for logs","scannerType":"SAST","description":"\n            \n\u003cp\u003e\n    When data from an untrusted source is put into a logger and not neutralized correctly,\n    an attacker could forge log entries or include malicious content.\n    Inserted false entries could be used to skew statistics, distract the administrator\n    or even to implicate another party in the commission of a malicious act.\n    If the log file is processed automatically, the attacker can render the file unusable\n    by corrupting the format of the file or injecting unexpected characters.\n    An attacker may also inject code or other commands into the log file and take advantage\n    of a vulnerability in the log processing utility (e.g. command injection or XSS).\n\u003c/p\u003e\n\u003cbr/\u003e\n\u003cp\u003e\n\u003cb\u003eCode at risk:\u003c/b\u003e\u003cbr/\u003e\n\u003cpre\u003eString val \u003d request.getParameter(\"user\");\nString metadata \u003d request.getParameter(\"metadata\");\n[...]\nif(authenticated) {\n    log.info(\"User \" + val + \" (\" + metadata + \") was authenticated successfully\");\n}\nelse {\n    log.info(\"User \" + val + \" (\" + metadata + \") was not authenticated\");\n}\n\u003c/pre\u003e\n\nA malicious user could send the metadata parameter with the value: \u003ccode\u003e\"Firefox) was authenticated successfully\\r\\n[INFO] User bbb (Internet Explorer\"\u003c/code\u003e.\n\u003c/p\u003e\n\n\u003cb\u003eSolution:\u003c/b\u003e\u003cbr/\u003e\n\u003cp\u003e\nYou can manually sanitize each parameter.\n\u003cpre\u003e\nlog.info(\"User \" + val.replaceAll(\"[\\r\\n]\",\"\") + \" (\" + userAgent.replaceAll(\"[\\r\\n]\",\"\") + \") was not authenticated\");\n\u003c/pre\u003e\n\u003c/p\u003e\n\n\u003cp\u003e\nYou can also configure your logger service to replace new line for all message events. Here is sample configuration for LogBack \u003ca href\u003d\"https://logback.qos.ch/manual/layouts.html#replace\"\u003eusing the \u003ccode\u003ereplace\u003c/code\u003e function\u003c/a\u003e.\n\u003cpre\u003e\n\u0026lt;pattern\u0026gt;%-5level - %replace(%msg){\u0027[\\r\\n]\u0027, \u0027\u0027}%n\u0026lt;/pattern\u0026gt;\n\u003c/pre\u003e\n\u003c/p\u003e\n\n\u003cp\u003e\nFinally, you can use a logger implementation that replace new line by spaces.\nThe project \u003ca href\u003d\"https://github.com/javabeanz/owasp-security-logging\"\u003eOWASP Security Logging\u003c/a\u003e has an implementation for Logback and Log4j.\n\u003c/p\u003e\n\n\u003cbr/\u003e\n\u003cp\u003e\n    \u003cb\u003eReferences\u003c/b\u003e\u003cbr/\u003e\n    \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/117.html\"\u003eCWE-117: Improper Output Neutralization for Logs\u003c/a\u003e\u003cbr/\u003e\n    \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/93.html\"\u003eCWE-93: Improper Neutralization of CRLF Sequences (\u0027CRLF Injection\u0027)\u003c/a\u003e\u003cbr/\u003e\n    \u003ca href\u003d\"https://logback.qos.ch/manual/layouts.html#replace\"\u003eCWE-93: Improper Neutralization of CRLF Sequences (\u0027CRLF Injection\u0027)\u003c/a\u003e\u003cbr/\u003e\n    \u003ca href\u003d\"https://github.com/javabeanz/owasp-security-logging\"\u003eOWASP Security Logging\u003c/a\u003e\u003cbr/\u003e\n\u003c/p\u003e\n\n\n        ","filename":"com/appsecco/dvja/services/ProductService.java","line":"28","severity":"Low","category":"SECURITY"},{"name":"Potential SQL/JPQL Injection (JPA)","scannerType":"SAST","description":"\n            \n\u003cp\u003e\nThe input values included in SQL queries need to be passed in safely.\nBind variables in prepared statements can be used to easily mitigate the risk of SQL injection.\n\u003c/p\u003e\n\u003cp\u003e\n    \u003cb\u003eVulnerable Code:\u003c/b\u003e\u003cbr/\u003e\n    \u003cpre\u003e\nEntityManager pm \u003d getEM();\n\nTypedQuery\u0026lt;UserEntity\u0026gt; q \u003d em.createQuery(\n    String.format(\"select * from Users where name \u003d %s\", username),\n    UserEntity.class);\n\nUserEntity res \u003d q.getSingleResult();\u003c/pre\u003e\n\u003c/p\u003e\n\u003cp\u003e\n    \u003cb\u003eSolution:\u003c/b\u003e\u003cbr/\u003e\n    \u003cpre\u003e\nTypedQuery\u0026lt;UserEntity\u0026gt; q \u003d em.createQuery(\n    \"select * from Users where name \u003d usernameParam\",UserEntity.class)\n    .setParameter(\"usernameParam\", username);\n\nUserEntity res \u003d q.getSingleResult();\u003c/pre\u003e\n\u003c/p\u003e\n\u003cbr/\u003e\n\u003cp\u003e\n\u003cb\u003eReferences (JPA)\u003c/b\u003e\u003cbr/\u003e\n\u003ca href\u003d\"https://docs.oracle.com/javaee/6/tutorial/doc/bnbrg.html\"\u003eThe Java EE 6 Tutorial: Creating Queries Using the Java Persistence Query Language\u003c/a\u003e\u003cbr/\u003e\n\u003cb\u003eReferences (SQL injection)\u003c/b\u003e\u003cbr/\u003e\n\u003ca href\u003d\"http://projects.webappsec.org/w/page/13246963/SQL%20Injection\"\u003eWASC-19: SQL Injection\u003c/a\u003e\u003cbr/\u003e\n\u003ca href\u003d\"https://capec.mitre.org/data/definitions/66.html\"\u003eCAPEC-66: SQL Injection\u003c/a\u003e\u003cbr/\u003e\n\u003ca href\u003d\"https://cwe.mitre.org/data/definitions/89.html\"\u003eCWE-89: Improper Neutralization of Special Elements used in an SQL Command (\u0027SQL Injection\u0027)\u003c/a\u003e\u003cbr/\u003e\n\u003ca href\u003d\"https://www.owasp.org/index.php/Top_10_2013-A1-Injection\"\u003eOWASP: Top 10 2013-A1-Injection\u003c/a\u003e\u003cbr/\u003e\n\u003ca href\u003d\"https://www.owasp.org/index.php/SQL_Injection_Prevention_Cheat_Sheet\"\u003eOWASP: SQL Injection Prevention Cheat Sheet\u003c/a\u003e\u003cbr/\u003e\n\u003ca href\u003d\"https://www.owasp.org/index.php/Query_Parameterization_Cheat_Sheet\"\u003eOWASP: Query Parameterization Cheat Sheet\u003c/a\u003e\u003cbr/\u003e\n\u003c/p\u003e\n\n        ","filename":"com/appsecco/dvja/services/ProductService.java","line":"48","severity":"Medium","category":"SECURITY"},{"name":"Potential CRLF Injection for logs","scannerType":"SAST","description":"\n            \n\u003cp\u003e\n    When data from an untrusted source is put into a logger and not neutralized correctly,\n    an attacker could forge log entries or include malicious content.\n    Inserted false entries could be used to skew statistics, distract the administrator\n    or even to implicate another party in the commission of a malicious act.\n    If the log file is processed automatically, the attacker can render the file unusable\n    by corrupting the format of the file or injecting unexpected characters.\n    An attacker may also inject code or other commands into the log file and take advantage\n    of a vulnerability in the log processing utility (e.g. command injection or XSS).\n\u003c/p\u003e\n\u003cbr/\u003e\n\u003cp\u003e\n\u003cb\u003eCode at risk:\u003c/b\u003e\u003cbr/\u003e\n\u003cpre\u003eString val \u003d request.getParameter(\"user\");\nString metadata \u003d request.getParameter(\"metadata\");\n[...]\nif(authenticated) {\n    log.info(\"User \" + val + \" (\" + metadata + \") was authenticated successfully\");\n}\nelse {\n    log.info(\"User \" + val + \" (\" + metadata + \") was not authenticated\");\n}\n\u003c/pre\u003e\n\nA malicious user could send the metadata parameter with the value: \u003ccode\u003e\"Firefox) was authenticated successfully\\r\\n[INFO] User bbb (Internet Explorer\"\u003c/code\u003e.\n\u003c/p\u003e\n\n\u003cb\u003eSolution:\u003c/b\u003e\u003cbr/\u003e\n\u003cp\u003e\nYou can manually sanitize each parameter.\n\u003cpre\u003e\nlog.info(\"User \" + val.replaceAll(\"[\\r\\n]\",\"\") + \" (\" + userAgent.replaceAll(\"[\\r\\n]\",\"\") + \") was not authenticated\");\n\u003c/pre\u003e\n\u003c/p\u003e\n\n\u003cp\u003e\nYou can also configure your logger service to replace new line for all message events. Here is sample configuration for LogBack \u003ca href\u003d\"https://logback.qos.ch/manual/layouts.html#replace\"\u003eusing the \u003ccode\u003ereplace\u003c/code\u003e function\u003c/a\u003e.\n\u003cpre\u003e\n\u0026lt;pattern\u0026gt;%-5level - %replace(%msg){\u0027[\\r\\n]\u0027, \u0027\u0027}%n\u0026lt;/pattern\u0026gt;\n\u003c/pre\u003e\n\u003c/p\u003e\n\n\u003cp\u003e\nFinally, you can use a logger implementation that replace new line by spaces.\nThe project \u003ca href\u003d\"https://github.com/javabeanz/owasp-security-logging\"\u003eOWASP Security Logging\u003c/a\u003e has an implementation for Logback and Log4j.\n\u003c/p\u003e\n\n\u003cbr/\u003e\n\u003cp\u003e\n    \u003cb\u003eReferences\u003c/b\u003e\u003cbr/\u003e\n    \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/117.html\"\u003eCWE-117: Improper Output Neutralization for Logs\u003c/a\u003e\u003cbr/\u003e\n    \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/93.html\"\u003eCWE-93: Improper Neutralization of CRLF Sequences (\u0027CRLF Injection\u0027)\u003c/a\u003e\u003cbr/\u003e\n    \u003ca href\u003d\"https://logback.qos.ch/manual/layouts.html#replace\"\u003eCWE-93: Improper Neutralization of CRLF Sequences (\u0027CRLF Injection\u0027)\u003c/a\u003e\u003cbr/\u003e\n    \u003ca href\u003d\"https://github.com/javabeanz/owasp-security-logging\"\u003eOWASP Security Logging\u003c/a\u003e\u003cbr/\u003e\n\u003c/p\u003e\n\n\n        ","filename":"com/appsecco/dvja/services/UserService.java","line":"93","severity":"Low","category":"SECURITY"},{"name":"Potential CRLF Injection for logs","scannerType":"SAST","description":"\n            \n\u003cp\u003e\n    When data from an untrusted source is put into a logger and not neutralized correctly,\n    an attacker could forge log entries or include malicious content.\n    Inserted false entries could be used to skew statistics, distract the administrator\n    or even to implicate another party in the commission of a malicious act.\n    If the log file is processed automatically, the attacker can render the file unusable\n    by corrupting the format of the file or injecting unexpected characters.\n    An attacker may also inject code or other commands into the log file and take advantage\n    of a vulnerability in the log processing utility (e.g. command injection or XSS).\n\u003c/p\u003e\n\u003cbr/\u003e\n\u003cp\u003e\n\u003cb\u003eCode at risk:\u003c/b\u003e\u003cbr/\u003e\n\u003cpre\u003eString val \u003d request.getParameter(\"user\");\nString metadata \u003d request.getParameter(\"metadata\");\n[...]\nif(authenticated) {\n    log.info(\"User \" + val + \" (\" + metadata + \") was authenticated successfully\");\n}\nelse {\n    log.info(\"User \" + val + \" (\" + metadata + \") was not authenticated\");\n}\n\u003c/pre\u003e\n\nA malicious user could send the metadata parameter with the value: \u003ccode\u003e\"Firefox) was authenticated successfully\\r\\n[INFO] User bbb (Internet Explorer\"\u003c/code\u003e.\n\u003c/p\u003e\n\n\u003cb\u003eSolution:\u003c/b\u003e\u003cbr/\u003e\n\u003cp\u003e\nYou can manually sanitize each parameter.\n\u003cpre\u003e\nlog.info(\"User \" + val.replaceAll(\"[\\r\\n]\",\"\") + \" (\" + userAgent.replaceAll(\"[\\r\\n]\",\"\") + \") was not authenticated\");\n\u003c/pre\u003e\n\u003c/p\u003e\n\n\u003cp\u003e\nYou can also configure your logger service to replace new line for all message events. Here is sample configuration for LogBack \u003ca href\u003d\"https://logback.qos.ch/manual/layouts.html#replace\"\u003eusing the \u003ccode\u003ereplace\u003c/code\u003e function\u003c/a\u003e.\n\u003cpre\u003e\n\u0026lt;pattern\u0026gt;%-5level - %replace(%msg){\u0027[\\r\\n]\u0027, \u0027\u0027}%n\u0026lt;/pattern\u0026gt;\n\u003c/pre\u003e\n\u003c/p\u003e\n\n\u003cp\u003e\nFinally, you can use a logger implementation that replace new line by spaces.\nThe project \u003ca href\u003d\"https://github.com/javabeanz/owasp-security-logging\"\u003eOWASP Security Logging\u003c/a\u003e has an implementation for Logback and Log4j.\n\u003c/p\u003e\n\n\u003cbr/\u003e\n\u003cp\u003e\n    \u003cb\u003eReferences\u003c/b\u003e\u003cbr/\u003e\n    \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/117.html\"\u003eCWE-117: Improper Output Neutralization for Logs\u003c/a\u003e\u003cbr/\u003e\n    \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/93.html\"\u003eCWE-93: Improper Neutralization of CRLF Sequences (\u0027CRLF Injection\u0027)\u003c/a\u003e\u003cbr/\u003e\n    \u003ca href\u003d\"https://logback.qos.ch/manual/layouts.html#replace\"\u003eCWE-93: Improper Neutralization of CRLF Sequences (\u0027CRLF Injection\u0027)\u003c/a\u003e\u003cbr/\u003e\n    \u003ca href\u003d\"https://github.com/javabeanz/owasp-security-logging\"\u003eOWASP Security Logging\u003c/a\u003e\u003cbr/\u003e\n\u003c/p\u003e\n\n\n        ","filename":"com/appsecco/dvja/services/UserService.java","line":"104","severity":"Low","category":"SECURITY"},{"name":"Potential CRLF Injection for logs","scannerType":"SAST","description":"\n            \n\u003cp\u003e\n    When data from an untrusted source is put into a logger and not neutralized correctly,\n    an attacker could forge log entries or include malicious content.\n    Inserted false entries could be used to skew statistics, distract the administrator\n    or even to implicate another party in the commission of a malicious act.\n    If the log file is processed automatically, the attacker can render the file unusable\n    by corrupting the format of the file or injecting unexpected characters.\n    An attacker may also inject code or other commands into the log file and take advantage\n    of a vulnerability in the log processing utility (e.g. command injection or XSS).\n\u003c/p\u003e\n\u003cbr/\u003e\n\u003cp\u003e\n\u003cb\u003eCode at risk:\u003c/b\u003e\u003cbr/\u003e\n\u003cpre\u003eString val \u003d request.getParameter(\"user\");\nString metadata \u003d request.getParameter(\"metadata\");\n[...]\nif(authenticated) {\n    log.info(\"User \" + val + \" (\" + metadata + \") was authenticated successfully\");\n}\nelse {\n    log.info(\"User \" + val + \" (\" + metadata + \") was not authenticated\");\n}\n\u003c/pre\u003e\n\nA malicious user could send the metadata parameter with the value: \u003ccode\u003e\"Firefox) was authenticated successfully\\r\\n[INFO] User bbb (Internet Explorer\"\u003c/code\u003e.\n\u003c/p\u003e\n\n\u003cb\u003eSolution:\u003c/b\u003e\u003cbr/\u003e\n\u003cp\u003e\nYou can manually sanitize each parameter.\n\u003cpre\u003e\nlog.info(\"User \" + val.replaceAll(\"[\\r\\n]\",\"\") + \" (\" + userAgent.replaceAll(\"[\\r\\n]\",\"\") + \") was not authenticated\");\n\u003c/pre\u003e\n\u003c/p\u003e\n\n\u003cp\u003e\nYou can also configure your logger service to replace new line for all message events. Here is sample configuration for LogBack \u003ca href\u003d\"https://logback.qos.ch/manual/layouts.html#replace\"\u003eusing the \u003ccode\u003ereplace\u003c/code\u003e function\u003c/a\u003e.\n\u003cpre\u003e\n\u0026lt;pattern\u0026gt;%-5level - %replace(%msg){\u0027[\\r\\n]\u0027, \u0027\u0027}%n\u0026lt;/pattern\u0026gt;\n\u003c/pre\u003e\n\u003c/p\u003e\n\n\u003cp\u003e\nFinally, you can use a logger implementation that replace new line by spaces.\nThe project \u003ca href\u003d\"https://github.com/javabeanz/owasp-security-logging\"\u003eOWASP Security Logging\u003c/a\u003e has an implementation for Logback and Log4j.\n\u003c/p\u003e\n\n\u003cbr/\u003e\n\u003cp\u003e\n    \u003cb\u003eReferences\u003c/b\u003e\u003cbr/\u003e\n    \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/117.html\"\u003eCWE-117: Improper Output Neutralization for Logs\u003c/a\u003e\u003cbr/\u003e\n    \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/93.html\"\u003eCWE-93: Improper Neutralization of CRLF Sequences (\u0027CRLF Injection\u0027)\u003c/a\u003e\u003cbr/\u003e\n    \u003ca href\u003d\"https://logback.qos.ch/manual/layouts.html#replace\"\u003eCWE-93: Improper Neutralization of CRLF Sequences (\u0027CRLF Injection\u0027)\u003c/a\u003e\u003cbr/\u003e\n    \u003ca href\u003d\"https://github.com/javabeanz/owasp-security-logging\"\u003eOWASP Security Logging\u003c/a\u003e\u003cbr/\u003e\n\u003c/p\u003e\n\n\n        ","filename":"com/appsecco/dvja/services/UserService.java","line":"29","severity":"Low","category":"SECURITY"},{"name":"Potential SQL/JPQL Injection (JPA)","scannerType":"SAST","description":"\n            \n\u003cp\u003e\nThe input values included in SQL queries need to be passed in safely.\nBind variables in prepared statements can be used to easily mitigate the risk of SQL injection.\n\u003c/p\u003e\n\u003cp\u003e\n    \u003cb\u003eVulnerable Code:\u003c/b\u003e\u003cbr/\u003e\n    \u003cpre\u003e\nEntityManager pm \u003d getEM();\n\nTypedQuery\u0026lt;UserEntity\u0026gt; q \u003d em.createQuery(\n    String.format(\"select * from Users where name \u003d %s\", username),\n    UserEntity.class);\n\nUserEntity res \u003d q.getSingleResult();\u003c/pre\u003e\n\u003c/p\u003e\n\u003cp\u003e\n    \u003cb\u003eSolution:\u003c/b\u003e\u003cbr/\u003e\n    \u003cpre\u003e\nTypedQuery\u0026lt;UserEntity\u0026gt; q \u003d em.createQuery(\n    \"select * from Users where name \u003d usernameParam\",UserEntity.class)\n    .setParameter(\"usernameParam\", username);\n\nUserEntity res \u003d q.getSingleResult();\u003c/pre\u003e\n\u003c/p\u003e\n\u003cbr/\u003e\n\u003cp\u003e\n\u003cb\u003eReferences (JPA)\u003c/b\u003e\u003cbr/\u003e\n\u003ca href\u003d\"https://docs.oracle.com/javaee/6/tutorial/doc/bnbrg.html\"\u003eThe Java EE 6 Tutorial: Creating Queries Using the Java Persistence Query Language\u003c/a\u003e\u003cbr/\u003e\n\u003cb\u003eReferences (SQL injection)\u003c/b\u003e\u003cbr/\u003e\n\u003ca href\u003d\"http://projects.webappsec.org/w/page/13246963/SQL%20Injection\"\u003eWASC-19: SQL Injection\u003c/a\u003e\u003cbr/\u003e\n\u003ca href\u003d\"https://capec.mitre.org/data/definitions/66.html\"\u003eCAPEC-66: SQL Injection\u003c/a\u003e\u003cbr/\u003e\n\u003ca href\u003d\"https://cwe.mitre.org/data/definitions/89.html\"\u003eCWE-89: Improper Neutralization of Special Elements used in an SQL Command (\u0027SQL Injection\u0027)\u003c/a\u003e\u003cbr/\u003e\n\u003ca href\u003d\"https://www.owasp.org/index.php/Top_10_2013-A1-Injection\"\u003eOWASP: Top 10 2013-A1-Injection\u003c/a\u003e\u003cbr/\u003e\n\u003ca href\u003d\"https://www.owasp.org/index.php/SQL_Injection_Prevention_Cheat_Sheet\"\u003eOWASP: SQL Injection Prevention Cheat Sheet\u003c/a\u003e\u003cbr/\u003e\n\u003ca href\u003d\"https://www.owasp.org/index.php/Query_Parameterization_Cheat_Sheet\"\u003eOWASP: Query Parameterization Cheat Sheet\u003c/a\u003e\u003cbr/\u003e\n\u003c/p\u003e\n\n        ","filename":"com/appsecco/dvja/services/UserService.java","line":"75","severity":"Medium","category":"SECURITY"},{"name":"Found Struts 2 endpoint","scannerType":"SAST","description":"\n            \n\u003cp\u003eIn Struts 2, the endpoints are Plain Old Java Objects (POJO) which means no Interface/Class needs to be implemented/extended.\u003c/p\u003e\n\u003cp\u003eWhen a request is routed to its controller (like the selected class), the supplied HTTP parameters are automatically mapped to setters for\nthe class. Therefore, all setters of this class should be considered as untrusted input even if the form doesn\u0027t include those values.\nAn attacker can simply provide additional values in the request, and they will be set in the object anyway, as long as that object has\nsuch a setter. The use of these parameters should be reviewed to make sure they are used safely.\u003c/p\u003e\n\n        ","filename":"com/appsecco/example/HelloWorld.java","line":"27","severity":"Low","category":"SECURITY"},{"name":"Found Struts 2 endpoint","scannerType":"SAST","description":"\n            \n\u003cp\u003eIn Struts 2, the endpoints are Plain Old Java Objects (POJO) which means no Interface/Class needs to be implemented/extended.\u003c/p\u003e\n\u003cp\u003eWhen a request is routed to its controller (like the selected class), the supplied HTTP parameters are automatically mapped to setters for\nthe class. Therefore, all setters of this class should be considered as untrusted input even if the form doesn\u0027t include those values.\nAn attacker can simply provide additional values in the request, and they will be set in the object anyway, as long as that object has\nsuch a setter. The use of these parameters should be reviewed to make sure they are used safely.\u003c/p\u003e\n\n        ","filename":"com/appsecco/example/Login.java","line":"24","severity":"Low","category":"SECURITY"}]